DOCKER-COMPOSE UP

Ao rodar o comando docker-compose up, o Compose ir√° executar todos os cont√™ineres especificados, baixando as imagens do reposit√≥rio ou buildando localmente a partir do Dockerfile, de acordo com o que foi especificado no arquivo. Outro detalhe importante √© que, nesse momento, al√©m de executar os cont√™ineres, o Compose ir√° criar os demais objetos especificados, como redes e volumes.
  Da mesma forma como rodamos os cont√™ineres no modo daemon, podemos faz√™-lo no docker-compose up utilizando o par√¢metro -d.

Caso voc√™ tenha dado um nome diferente do padr√£o para o seu arquivo Compose, o par√¢metro -f pode ser utilizado. Lembre-se que ele pertence ao comando docker-compose, sendo assim, ele precisa ser passado logo ap√≥s o comando.
  Por exemplo: docker-compose -f meu-arquivo-compose.yaml up ou docker-compose -f meu-arquivo-compose.yml stop. A sintaxe docker-compose <COMMAND> -f n√£o funcionar√°.

Se seu arquivo possuir o nome padr√£o docker-compose.yaml, n√£o √© necess√°rio passar a essa flag, apenas lembre-se de estar no mesmo diret√≥rio que o arquivo.

- Se voc√™ construiu localmente um arquivo docker-compose.yaml como o do exemplo que desenvolvemos at√© aqui, tente entrar no diret√≥rio em   que est√° o arquivo e executar os services utilizando o o comando:

* docker-compose up

============================================================

- Podemos tamb√©m usar este comando especificando um service.

* docker-compose up <SERVICE NAME>

============================================================

- Se fizermos isso, o Compose ir√° incluir tamb√©m suas depend√™ncias. Por exemplo, seguindo com nosso arquivo docker-compose.yaml de, se rodarmos o comando:

* docker-compose backend

============================================================

- O Compose tamb√©m ir√° criar e startar o database, que definimos no docker-compose.yaml como depend√™ncia do service backend, por meio do par√¢metro depends_on.

Caso voc√™ use o par√¢metro build (que recebe o caminho do _Dockerfile da sua aplica√ß√£o) ao inv√©s de image, o _Compose ir√° buildar a imagem se isso n√£o tiver sido feito anteriormente.

Nesse sentido, outro par√¢metro importante para conhecermos e muito usual √© o --build. Perceba que, uma vez que a imagem seja buildada pelo Compose, ele utilizar√° essa imagem j√° criada na pr√≥xima vez que executarmos o up, sem atualiz√°-la.
  Para for√ßamos um novo build, podemos utilizar a tag --build especificando um service ou n√£o (dessa maneira ele ir√° tentar buildar todas as imagens poss√≠veis novamente).

* docker-compose up --build <SERVICE NAME>

√â muito comum utilizarmos o --build durante o desenvolvimento, pois quando fazemos alguma altera√ß√£o e queremos refleti-la em nosso ambiente Compose, precisamos rebuildar a imagem do service alterado para que as atualiza√ß√µes sejam aplicadas ao ambiente.

‚ö†Ô∏è Aviso: Lembre-se que para os comandos Compose, quando n√£o especificado um arquivo com -f, a ferramenta ir√° buscar pelo arquivo docker-compose.yaml no diret√≥rio atual.

============================================================

DOCKER-COMPOSE DOWN

Se quisermos parar nossos services, podemos utilizar o comando down. Com ele, todos os containers ir√£o ser parados e os objetos criados pelo up, como as redes, por exemplo, ser√£o removidos.

* docker-compose down

De olho na dica üëÄ: N√£o precisa se preocupar com remo√ß√£o das redes e dos apontamentos que o comando causar√°, pois ao rodar o up novamente, tudo ser√° recriado.

============================================================

PS

- Semelhante ao comando com containers, podemos utilizar o par√¢metro ps para listar os containers ativos. Por√©m, a grande diferen√ßa √© que s√≥ ser√£o listados os containers pertencentes ao arquivo do Compose referenciado (seja utilizando a flag -f ou utilizando o nome de arquivo padr√£o).

* docker-compose ps

============================================================

STOP

- Com o comando stop, conseguimos parar os services e, consequentemente, todos os containers relacionados. Diferentemente do down, ele n√£o ir√° remover as redes e outros objetos criados pelo up.

* docker-compose stop

- Relembrandoüß†: Podemos especificar um service a ser parado, para isso basta utilizarmos o nome que definimos no arquivo Compose.

* docker-compose stop <SERVICE NAME>

- De maneira semelhante ao que ocorre com o docker-compose up quando especificamos um service, ao especificarmos um service no o docker-compose stop, ele ir√° parar os servi√ßos respeitando as depend√™ncias.
  Em nosso exemplo, o backend ser√° parado antes do database, ao executarmos o comando:

* docker-compose stop backend

============================================================

START

- O start funciona de maneira an√°loga ao stop. Com ele, podemos startar os services parados referentes √†quele arquivo Compose.

* docker-compose start

- Tamb√©m de maneira semelhante ao stop, podemos especificar um service para ser startado utilizando o nome dele.

* docker-compose start <SERVICE NAME>

============================================================

LOGS

Outro comando bem interessante √© o logs. Com ele, podemos ver os logs de nossos services de maneira semelhante como fazemos unitariamente com os cont√™ineres. Aqui, podemos especificar um service para visualizar os logs de todos os seus cont√™ineres, ou ver todos os logs daquele ambiente, conforme arquivo do Compose.

De maneira similar tamb√©m ao comando para cont√™ineres, podemos utilizar a flag -f ou --follow para acompanhar em tempo real as sa√≠das dos cont√™ineres e o --tail, em que podemos definir o n√∫mero de linhas para ser exibidos a partir do final dos logs.

* docker-compose logs -f --tail=100 <SERVICE NAME>