- listar os networks existentes

docker network ls

  name      driver
* bridge    bridge
* host      host
* none      null

- bridge: Ao ser iniciado, todo contÃªiner Ã© associado a uma rede. Caso essa rede nÃ£o seja especificada explicitamente por nÃ³s, ele serÃ¡ associado Ã  rede Bridge.
Todos os contÃªineres associados a essa rede poderÃ£o se comunicar via protocolo TCP/IP e, caso soubermos o IP do contÃªiner que queremos conectar, podemos enviar trÃ¡fego a ele. Entretanto, os IPs de um contÃªiner sÃ£o gerados automaticamente, e nÃ£o Ã© efetivo fazermos a conexÃ£o dessa forma, pois sempre que o contÃªiner for reiniciado, o IP poderÃ¡ mudar.

- host: Ao associarmos um contÃªiner a essa rede, ela passa a compartilhar toda stack de rede do host, ou seja, da mÃ¡quina que roda o ambiente Docker.
Anota aÃ­ ğŸ–Š: O uso desta rede Ã© recomendada apenas para alguns serviÃ§os especÃ­ficos, normalmente de infra, em que o contÃªiner precisa desse compartilhamento. Caso contrÃ¡rio, a recomendaÃ§Ã£o Ã© evitÃ¡-la.

- none: Essa Ã© uma rede que nÃ£o possui nenhum driver associado. Dessa maneira, ao atribuir um contÃªiner a ela, o mesmo ficarÃ¡ isolado. Ela Ã© Ãºtil quando temos contÃªineres que utilizam arquivos para a execuÃ§Ã£o de comandos ou para se comunicar, por exemplo: um contÃªiner de backup ou que rode apenas um script localmente.

=====================

- criar nossa prÃ³pria rede

docker network create ( -d ou --driver) bridge (minha-rede)--> nome da rede

=====================

- Para vincularmos nosso contÃªiner Ã  rede criada durante sua execuÃ§Ã£o, basta utilizarmos o parÃ¢metro --network

docker container run -itd --network minha-rede --name meu-container busybox

=====================

- Para conectarmos um contÃªiner jÃ¡ criado, basta utilizarmos o parÃ¢metro connect

docker network connect minha-rede meu-container

=====================

- Para desconectÃ¡-lo, basta utilizar o parÃ¢metro disconnect

docker network disconnect minha-rede meu-container