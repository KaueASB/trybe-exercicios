				CAMADA DE CONTROLLERS

Voc√™ sabia que desde o primeiro dia em que iniciou seus estudos sobre Express, j√° vem usando o principal componente de sua camada de controllers? Isso mesmo, s√£o os middlewares!

A camada dos controllers √© a primeira em uma API. √â por meio dela que os dados da requisi√ß√£o do cliente ser√£o recebidos e tratados, para depois serem passados para as pr√≥ximas camadas.

O controller recebe as requisi√ß√µes feitas √† API e ent√£o consulta o service, enviando na resposta aquilo que o service deve retornar: uma mensagem de erro (em caso de falha) ou as informa√ß√µes pedidas (em caso de sucesso).				

üìù Anote a√≠: ao se comunicar com o service, o controller n√£o deve passar toda a request, ou seja, as informa√ß√µes devem ser extra√≠das e apenas o que for necess√°rio para determinada a√ß√£o deve ser transferido.
				
				CAMADAS DE SERVICES

√Ä medida que os projetos crescem, os modelos tornam-se cada vez maiores e mais complexos, pois passam a acumular mais regras de neg√≥cio. Por isso, √© comum vermos uma nova camada sendo adicionada em projetos que exigem uma regra de neg√≥cio mais complexa e APIs.

Essa camada √© chamada de Services e fica situada entre as camadas de Controller e Model, sendo a respons√°vel pela nossa regra de neg√≥cio.

üìù Anote a√≠: quando adicionamos uma camada de Services, a camada Model fica com menos atribui√ß√µes, ou seja, ter√° como responsabilidade somente o acesso a dados. Exemplificando: quebramos a camada de modelo em outras duas partes, a de Controle (vista anteriormente) e a de Servi√ßo (que estamos aprendendo), cada uma com sua responsabilidade.

O que uma boa camada de servi√ßo precisa fazer?* ü§î

Vejamos as atribui√ß√µes:
- Centralizar acesso a dados e fun√ß√µes externas.
	- Exemplo: chamar um evento que dispara uma mensagem no Slack.
- Abstrair regras de neg√≥cio complexas do seu modelo;

Agora, o que uma boa camada de servi√ßo n√£o deve fazer? ü§î
- N√£o deve ter nenhum tipo de informa√ß√£o sobre o acesso a camada de dados.
	- Exemplo: n√£o ter nenhuma query SQL.
- N√£o deve receber nada relacionado ao HTTP, seja o request ou o response.
- O controller deve mandar apenas o necess√°rio para o service.
