				Arquitetura MSC
- Camada de Modelo (M): Arquivos onde iremos executar as operações do banco de dados, como criar conexões e executar queries.

- Camada de Serviço (S): Arquivos onde iremos estruturar nossas regras de negócio, geralmente é quem chama os métodos definidos na camada de modelo.

- Camada de Controladores (C): Interface mais próxima da pessoa usuária ou de uma requisição, irá processar e chamar as devidas funções da camada de serviço.

Obs.: Algumas vezes a camada de Controladores pode se comunicar direto com a camada de Modelo, dispensando o uso da camada de Serviço, principalmente em situações em que não temos uma regra de negócio tão complexa. Mas, cuidado, isso deve ser usado apenas em casos específicos, e uma vez que um endpoint exija o uso de uma camada de Serviço, o ideal é que todos os outros também utilizem essa camada, para que a arquitetura seja respeitada e a aplicação não se torne "bagunçada".

			    Camada Model (Modelo)
O model é onde nós manipulamos e definimos a estrutura dos nossos dados. Todo acesso aos dados deve passar por essa camada.

Os dados que a aplicação utiliza podem estar armazenados em um banco de dados, acessados através de uma API externa, arquivos ou outros dispositivos de armazenamento.

Ele é responsável por abstrair completamente os detalhes de acesso e armazenamento, fornecendo somente uma API que permita requisitar e manipular esses dados. Por exemplo, é responsabilidade da camada de model estabelecer uma conexão com o banco de dados.

À medida que você for aprendendo sobre as camadas de uma aplicação, você verá que o model deve ser completamente desacoplado das demais camadas. Ou seja, o model não pode ter conhecimento dessas camadas. Isso facilita a manutenção do código, pois alterações em outras camadas não terão impacto nos seus modelos.

				Model com MySQL

- Criando e populando o banco de dados

Para utilizar o MySQL precisamos, primeiramente, criar nosso banco de dados, que será chamado model_example. Por enquanto, só teremos a tabela authors, com informações de pessoas escritoras. A tabela terá as seguintes colunas:

- Nome. Obrigatório;
- Nome do meio. Opcional;
- Sobrenome. Obrigatório;
- Data de nascimento. Opcional;
- Nacionalidade. Opcional;

			Estabelecendo uma conexão com o banco
			
Primeiro, importamos o mysql do módulo mysql2/promise, assim utilizamos a versão mais atualizada do mysql2 em vez de usar a versão com callbacks.

O método createPool cria uma pool de conexões com o banco de dados. Isso significa que a própria biblioteca irá gerenciar as múltiplas conexões que fizermos com o banco. O createPool recebe um objeto com as credenciais necessárias para estabelecer a conexão. Entre as opções possíveis, estão:

- host: local onde o servidor do MySQL está armazenado. Como estamos executando localmente, usamos localhost;

- user: usuário que vamos utilizar para acessar o banco. Estamos usando o usuário root nesse exemplo;

- password: senha do usuário especificado. Coloque '' se não houver senha para o usuário;

- database: nome do banco com o qual queremos nos conectar;
O método createPool retorna um objeto Pool representando uma sessão com o banco.
Para não ser necessário criar uma sessão e selecionar o schema sempre que precisarmos acessar o banco, armazenamos nossa pool na variável connection.

O método createPool retorna um objeto Pool representando uma sessão com o banco.
Para não ser necessário criar uma sessão e selecionar o schema sempre que precisarmos acessar o banco, armazenamos nossa pool na variável connection.
